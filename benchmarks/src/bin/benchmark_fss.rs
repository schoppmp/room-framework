extern crate oblivc;
extern crate liback_sys;

// include bindings generated by the build script
pub mod fss_oblivc {
    #![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, unused_variables)]
    include!(concat!(env!("OUT_DIR"), "/benchmarks.rs"));
}
use self::fss_oblivc::*;

fn main() {
    for len_client in (0..).map(|x| 1<<x) {
        for len_server in (0..20).map(|x| 1<<x) {
            println!("len_server = {}", len_server);
            println!("len_client = {}", len_client);
            let len_server2 = len_server;
            let len_client2 = len_client;
            let server = ::std::thread::spawn(move || {
                let mut args = BenchmarkFSSArgs{
                    len: len_server2,
                    num_iterations: len_client2,
                    result_time: 0.
                };
                let pd = oblivc::protocol_desc()
                    .party(1)
                    .accept(format!("{}", 37867)).unwrap();
                unsafe {
                    pd.exec_yao_protocol(benchmark_fss, &mut args);
                }
            });
            let mut args = BenchmarkFSSArgs{
                len: len_server,
                num_iterations: len_client,
                result_time: 0.
            };
            let pd = oblivc::protocol_desc()
                .party(2)
                .connect("localhost", format!("{}", 37867)).unwrap();
            unsafe {
                pd.exec_yao_protocol(benchmark_fss, &mut args);
            }
            server.join().unwrap();
            println!("Time (ms): {}", args.result_time);
        }
    }
}
