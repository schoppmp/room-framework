extern crate oblivc;
extern crate liback_sys;

// include bindings generated by the build script
pub mod oblivc_impl {
    #![allow(non_snake_case, non_camel_case_types, non_upper_case_globals, unused_variables)]
    include!(concat!(env!("OUT_DIR"), "/benchmarks.rs"));
}
use self::oblivc_impl::*;

fn main() {
    static NUM_EXPERIMENTS: usize = 2;
    for len in (1..).map(|x| 1<<x) {
        for _ in 0..NUM_EXPERIMENTS {
            println!("len = {}", len);
            let len2 = len;
            let server = ::std::thread::spawn(move || {
                let set2 : Vec<u32> = ((len2/2)..(len2+len2/2)).collect();
                let mut args = BenchmarkSCSArgs{
                    len: len2 as usize,
                    values: set2.as_ptr(),
                    result_time: 0.
                };
                let pd = oblivc::protocol_desc()
                    .party(1)
                    .accept(format!("{}", 37845)).unwrap();
                unsafe {
                    pd.exec_yao_protocol(benchmark_scs, &mut args);
                }
            });
            let set : Vec<u32> = (0..len).collect();
            let mut args = BenchmarkSCSArgs{
                len: len as usize,
                values: set.as_ptr(),
                result_time: 0.
            };
            let pd = oblivc::protocol_desc()
                .party(2)
                .connect("localhost", format!("{}", 37845)).unwrap();
            unsafe {
                pd.exec_yao_protocol(benchmark_scs, &mut args);
            }
            server.join().unwrap();
            println!("Time (ms): {}", args.result_time);
        }
    }
}
