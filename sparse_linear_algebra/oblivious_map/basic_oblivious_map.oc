#include "basic_oblivious_map.h"
#include "bcrandom.h"
#include "copy.oh"
#include "oaes.oh"
#include "obliv.oh"

void pir_basic_oblivc(void *vargs) {
  pir_basic_oblivc_args *args = vargs;
  size_t index_size = args->index_size;
  size_t element_size = args->element_size;
  size_t l = args->num_ciphertexts;
  const size_t block_size = 16;
  OcCopy cpy = ocCopyCharN(element_size + 1);  // 1 byte for valid flag
  OcCopy cpy2 = ocCopyCharN(element_size);

  obliv uint8_t *defaults = calloc(l * element_size, sizeof(obliv uint8_t));
  obliv uint8_t *key = calloc(176, sizeof(obliv uint8_t));
  obliv uint8_t *ciphertexts =
      calloc(l * (element_size + 1), sizeof(obliv uint8_t));
  obliv uint8_t *indexes = calloc(l * (index_size + 1), sizeof(obliv uint8_t));
  obliv uint8_t *result_client =
      calloc(l * element_size, sizeof(obliv uint8_t));

  feedOblivCharArray(defaults, args->defaults_server, l * element_size, 1);
  feedOblivCharArray(key, args->key_server, block_size, 1);
  feedOblivCharArray(ciphertexts, args->ciphertexts_client,
                     l * (element_size + 1), 2);
  feedOblivCharArray(indexes, args->indexes_client, l * (index_size + 1), 2);

  oaes_128_expandkey(key);
  obliv uint8_t *buf = calloc(block_size, sizeof(obliv uint8_t));
  obliv uint8_t *ctr = calloc(block_size, sizeof(obliv uint8_t));
  obliv uint8_t *zero_value = calloc(element_size, sizeof(obliv uint8_t));
  for (size_t i = 0; i < l; i++) {
    for (size_t j = 0; j < index_size; j++) {
      ctr[j] = indexes[i * (index_size + 1) + j];
    }
    oaes_128_from_expanded(buf, key, ctr);
    for (size_t j = 0; j < element_size + 1; j++) {
      ciphertexts[i * (element_size + 1) + j] ^= buf[j];
    }
    obliv uint8_t *current_value = &ciphertexts[i * (element_size + 1)];
    obliv uint8_t *current_value_client = &result_client[i * element_size];
    obliv uint8_t *current_value_server = &defaults[i * element_size];
    obliv if ((ciphertexts[i * (element_size + 1) + element_size] &
               1 == 1) &  // server element valid
              (indexes[i * (index_size + 1) + index_size] &
               1 == 1)  // client index valid
    ) {
      ocCopy(&cpy2, current_value_client, current_value);
    }
    else {
      if (args->shared_output) {
        ocCopy(&cpy2, current_value_client, zero_value);
      } else {
        ocCopy(&cpy2, current_value_client, current_value_server);
      }
    }
    if (args->shared_output) {
      __obliv_c__setPlainSub(current_value_client, current_value_client,
                             current_value_server, 8 * element_size);
    }
  }
  revealOblivCharArray(args->result, result_client, l * element_size, 2);

  free(ciphertexts);
  free(indexes);
  free(defaults);
  free(result_client);
  free(key);
  free(buf);
  free(ctr);
  free(zero_value);
}
