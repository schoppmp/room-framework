#include "bcrandom.h"
#include "copy.oh"
#include "oaes.oh"
#include "poly_oblivious_map.h"

void pir_poly_oblivc(void *vargs) {
  pir_poly_oblivc_args *args = vargs;

  // get party inputs
  size_t block_size =
      ocBroadcastLLong(args->input_size, 1);  // TODO: make this constant?
  size_t ciphertexts_size = ocBroadcastLLong(args->input_size, 2);
  // always pairs of blocks (ciphertext, counter)
  size_t num_ciphertexts = (ciphertexts_size / block_size) / 2;
  obliv uint8_t *ciphertexts = calloc(ciphertexts_size, sizeof(obliv uint8_t));
  obliv uint8_t *key = calloc(176, sizeof(obliv uint8_t));
  // create shares
  obliv uint8_t *result1 =
      calloc(num_ciphertexts, sizeof(obliv uint8_t) * args->value_type_size);
  obliv uint8_t *result2 =
      calloc(num_ciphertexts, sizeof(obliv uint8_t) * args->value_type_size);
  feedOblivCharArray(key, args->input, block_size, 1);
  feedOblivCharArray(result1, args->defaults,
                     num_ciphertexts * args->value_type_size, 1);
  feedOblivCharArray(ciphertexts, args->input, ciphertexts_size, 2);

  // decrypt
  oaes_128_expandkey(key);
  obliv uint8_t *plaintexts =
      calloc(ciphertexts_size / 2, sizeof(obliv uint8_t));
  for (size_t i = 0; i < num_ciphertexts; i++) {
    // encrypt counter and xor to ciphertext
    oaes_128_from_expanded(plaintexts + i * block_size, key,
                           ciphertexts + (i * 2 + 1) * block_size);
    for (size_t j = 0; j < block_size; j++) {
      plaintexts[i * block_size + j] ^= ciphertexts[i * 2 * block_size + j];
    }
  }

  OcCopy cpy = ocCopyCharN(args->value_type_size);
  obliv uint8_t *zero_value =
      calloc(args->value_type_size, sizeof(obliv uint8_t));
  for (size_t i = 0; i < num_ciphertexts; i++) {
    obliv bool ok = 1;
    // check if decryption was successful
    for (size_t j = 0; j < args->statistical_security / 8; j++) {
      ok &= (plaintexts[i * block_size + j] == 0);
    }
    size_t offset = args->statistical_security / 8;
    obliv uint8_t *current_value = &result2[i * args->value_type_size];
    obliv if (ok) {
      ocCopy(&cpy, current_value, &plaintexts[i * block_size + offset]);
    }
    else {
      if (args->shared_output) {
        ocCopy(&cpy, current_value, zero_value);
      } else {
        ocCopy(&cpy, current_value, &result1[i * args->value_type_size]);
      }
    }
    if (args->shared_output) {
      // subtract server's share from client's share (which is either zero or
      // the value found in the map)
      __obliv_c__setPlainSub(current_value, current_value,
                             &result1[i * args->value_type_size],
                             8 * args->value_type_size);
    }
  }
  revealOblivCharArray(args->result, result2,
                       num_ciphertexts * args->value_type_size, 2);

  oflush(ocCurrentProto());
  free(result1);
  free(result2);
  free(ciphertexts);
  free(plaintexts);
  free(key);
  free(zero_value);
}
